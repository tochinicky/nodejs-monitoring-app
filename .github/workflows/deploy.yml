name: Deploy Node.js App
on:
  push:
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npx eslint . --ext .js

      - name: Run tests
        run: npm test

      - name: Check PM2 ecosystem file
        run: |
          if [ ! -f ecosystem.config.js ]; then
            echo "Error: ecosystem.config.js is missing"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Install dependencies
        run: npm install

      - name: Install sshpass
        run: sudo apt-get update && sudo apt-get install -y sshpass

      - name: Check SSH Connection
        env:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          export SSHPASS="$SSH_PASSWORD"
          sshpass -e ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP "echo 'SSH connection successful'"

          if [ $? -ne 0 ]; then
            echo "SSH connection failed. Please check credentials and VM availability."
            exit 1
          fi

      - name: Transfer Files to Azure VM
        env:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          # Use environment variable directly for sshpass
          export SSHPASS="$SSH_PASSWORD"

          # Transfer files using rsync with direct password from environment
          rsync -azP --delete \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='.github' \
            -e "sshpass -e ssh -o StrictHostKeyChecking=no" \
            ./ $VM_USER@$VM_IP:/home/$VM_USER/app/

      - name: Deploy and Start Application
        env:
          VM_IP: ${{ secrets.VM_IP }}
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          VM_USER: ${{ secrets.VM_USER }}
        run: |
          # Set password in environment variable
          export SSHPASS="$SSH_PASSWORD"

          # Install Node.js and npm
            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
            sudo apt-get install -y nodejs

          # Execute all deployment commands in a single SSH session
          sshpass -e ssh -o StrictHostKeyChecking=no $VM_USER@$VM_IP << 'EOF'
            # Print some debug information
            echo "Deploying application..."
            echo "Current directory: $(pwd)"

          # Install Node.js and npm inside the VM
            if ! command -v node &> /dev/null; then
              echo "Node.js not found, installing..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            echo "Node version: $(node -v || echo 'Node not found')"
            echo "NPM version: $(npm -v || echo 'NPM not found')"
            
            # Navigate to app directory
            cd /home/$USER/app
            
            # Install production dependencies
            echo "Installing dependencies..."
            npm ci --omit=dev --prefer-offline --no-audit
            
            # Install PM2 globally if not already installed
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2 globally..."
              sudo npm install -g pm2 --unsafe-perm
            fi
            
            # Start or restart the application
            echo "Starting application..."
            if [ -f ecosystem.config.js ]; then
              echo "Using ecosystem.config.js"
              pm2 restart ecosystem.config.js --update-env || pm2 start ecosystem.config.js
            else
              echo "No ecosystem file found, looking for alternative start options..."
              if grep -q '"start"' package.json; then
                echo "Using npm start script"
                pm2 restart app || pm2 start npm --name "app" -- start
              else
                echo "Trying to start main file"
                pm2 restart app.js || pm2 start app.js
              fi
            fi
            
            # List running processes for verification
            echo "Running processes:"
            pm2 list
            
            # Save PM2 process list
            pm2 save
            
            echo "Deployment completed successfully!"
          EOF
