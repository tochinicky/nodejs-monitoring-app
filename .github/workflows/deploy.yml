name: Deploy Node.js App

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install sshpass
        run: sudo apt-get install -y sshpass

      - name: Deploy via SSH
        env:
          SSH_PASSWORD: ${{ secrets.SSH_PASSWORD }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_IP: ${{ secrets.VM_IP }}
          DOMAIN: ${{ secrets.DOMAIN }}
          CERTBOT_EMAIL: ${{ secrets.CERTBOT_EMAIL }}
        run: |
          # Verify local variables are set
          echo "VM_IP length: ${#VM_IP}"
          echo "DOMAIN: ${DOMAIN}"
          
          sshpass -p "$SSH_PASSWORD" ssh -o StrictHostKeyChecking=accept-new "${VM_USER}@${VM_IP}" << EOL
          #!/bin/bash
          set -euxo pipefail
      
          # 1. Enable and configure firewall
          if ! sudo ufw status | grep -qw active; then
              echo "🛡️ Initializing firewall..."
              sudo ufw allow OpenSSH
              sudo ufw allow 80/tcp
              sudo ufw allow 443/tcp
              sudo ufw --force enable
          fi
      
          # 2. Verify variable availability
          declare -A required_vars=(
              ["DOMAIN"]="$DOMAIN"
              ["VM_IP"]="$VM_IP"
          )
      
          for var in "\${!required_vars[@]}"; do
              if [ -z "\${required_vars[\$var]}" ]; then
                  echo "❌ Missing required variable: \$var"
                  exit 1
              fi
          done
      
          # 3. DNS verification with retries
          for attempt in {1..5}; do
              if dig +short "$DOMAIN" | grep -qw "$VM_IP"; then
                  echo "✅ DNS verified"
                  break
              fi
              if [ \$attempt -eq 5 ]; then
                  echo "❌ DNS verification failed after 5 attempts"
                  echo "Domain $DOMAIN must resolve to $VM_IP"
                  exit 1
              fi
              sleep \$((attempt * 10))
          done
      
          # 4. Package installation
          sudo apt-get update
          sudo apt-get install -y nginx certbot python3-certbot-nginx nodejs npm
      
          # 5. Configure temporary Nginx
          sudo tee /etc/nginx/sites-available/temp_verify << NGX
          server {
              listen 80;
              server_name $DOMAIN;
              
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
                  try_files \$uri =404;
              }
              
              location / {
                  return 403 "Certificate verification in progress";
              }
          }
          NGX
      
          # 6. Activate config
          sudo rm -f /etc/nginx/sites-enabled/*
          sudo ln -s /etc/nginx/sites-available/temp_verify /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl restart nginx
      
          # 7. SSL Certificate setup
          sudo certbot certonly --nginx \
              -n --agree-tos \
              -m "$CERTBOT_EMAIL" \
              -d "$DOMAIN" \
              --key-type ecdsa \
              --cert-name "$DOMAIN" \
              --keep-until-expiring \
              --preferred-chain "ISRG Root X1"
      
          # 8. Final Nginx config
          sudo tee /etc/nginx/sites-available/production << PROD
          server {
              listen 80;
              server_name $DOMAIN;
              return 301 https://\$host\$request_uri;
          }
      
          server {
              listen 443 ssl http2;
              server_name $DOMAIN;
      
              ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
      
              # SSL configuration
              ssl_protocols TLSv1.3;
              ssl_prefer_server_ciphers off;
              ssl_ecdh_curve X25519:secp521r1:secp384r1;
      
              # ACME challenges
              location /.well-known/acme-challenge/ {
                  root /var/www/html;
              }
      
              # Node.js proxy
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host \$host;
              }
          }
          PROD
      
          # 9. Activate production config
          sudo rm -f /etc/nginx/sites-enabled/temp_verify
          sudo ln -s /etc/nginx/sites-available/production /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl reload nginx
      
          # 10. Verify installation
          curl -sI https://$DOMAIN | grep -q "200 OK" || {
              echo "❌ Final verification failed"
              exit 1
          }
      
          echo "🎉 Deployment successful!"
        EOL